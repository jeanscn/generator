<?xml version="1.0" encoding="UTF-8"?>
        <!--

               Copyright 2006-2019 the original author or authors.

               Licensed under the Apache License, Version 2.0 (the "License");
               you may not use this file except in compliance with the License.
               You may obtain a copy of the License at

                  http://www.apache.org/licenses/LICENSE-2.0

               Unless required by applicable law or agreed to in writing, software
               distributed under the License is distributed on an "AS IS" BASIS,
               WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
               See the License for the specific language governing permissions and
               limitations under the License.

        -->
        <!--
          This DTD defines the structure of the MyBatis generator configuration file.
          Configuration files should declare the DOCTYPE as follows:

          <!DOCTYPE generatorConfiguration PUBLIC
            "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
            "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

          Please see the documentation included with MyBatis generator for details on each option
          in the DTD.  You may also view documentation on-line here:

          http://www.mybatis.org/generator/

        -->

        <!--
          The generatorConfiguration element is the root element for configurations.
        -->
        <!ELEMENT generatorConfiguration (properties?, classPathEntry*, context+)>

        <!--
          The properties element is used to define a standard Java properties file
          that contains placeholders for use in the remainder of the configuration
          file.
        -->
        <!ELEMENT properties EMPTY>
        <!ATTLIST properties
                resource CDATA #IMPLIED
                url CDATA #IMPLIED>

        <!--
          The context element is used to describe a context for generating files, and the source
          tables.
           属性信息：
          1、moduleKeyword 模块标识（controller request mapping url根、html页面根路径）
          2、integrateMybatisPlus 是否集成mybatis plus 默认 true
          3、integrateSpringSecurity 是否集成Spring Security 默认 true
          4、forceUpdateScalableElement 是否强制覆盖可扩展自定义的元素（controller、dao、service、service接口、pojo\maps、pojo\vo）
          可能的property配置：
          1、htmlTargetProject 页面文件所在的路径。默认值：src/main/resources/templates
          2、htmlUiFrame 页面模板名称 默认值：bottom
          3、htmlBarPosition 页面操作条位置。默认值：bottom
          4、htmlPageColumnsNum 页面列数 默认值：2
          5、htmlLoadingFrameType 页面加载方式 默认值：full（pop,full,inner）

        -->
        <!ELEMENT context (property*, plugin*, commentGenerator?, (connectionFactory | jdbcConnection), javaTypeResolver?,
                javaModelGenerator, sqlMapGenerator?, javaClientGenerator?, table+)>
        <!ATTLIST context id ID #REQUIRED
                defaultModelType CDATA #IMPLIED
                targetRuntime CDATA #IMPLIED
                introspectedColumnImpl CDATA #IMPLIED
                moduleKeyword CDATA #IMPLIED
                integrateMybatisPlus (true|false) #IMPLIED
                integrateSpringSecurity (true|false) #IMPLIED
                forceUpdateScalableElement (true|false) #IMPLIED>

        <!--
          The connectionFactory element is used to describe the connection factory used
          for connecting to the database for introspection.  Either connectionFactory
          or jdbcConnection must be specified, but not both.
        -->
        <!ELEMENT connectionFactory (property*)>
        <!ATTLIST connectionFactory
                type CDATA #IMPLIED>

        <!--
          The jdbcConnection element is used to describe the JDBC connection that the generator
          will use to introspect the database.
        -->
        <!ELEMENT jdbcConnection (property*)>
        <!ATTLIST jdbcConnection
                driverClass CDATA #REQUIRED
                connectionURL CDATA #REQUIRED
                userId CDATA #IMPLIED
                password CDATA #IMPLIED>

        <!--
          The classPathEntry element is used to add the JDBC driver to the run-time classpath.
          Repeat this element as often as needed to add elements to the classpath.
        -->
        <!ELEMENT classPathEntry EMPTY>
        <!ATTLIST classPathEntry
                location CDATA #REQUIRED>

        <!--
          The property element is used to add custom properties to many of the generator's
          configuration elements.  See each element for example properties.
          Repeat this element as often as needed to add as many properties as necessary
          to the configuration element.
        -->
        <!ELEMENT property EMPTY>
        <!ATTLIST property
                name CDATA #REQUIRED
                value CDATA #REQUIRED>

        <!--
          The plugin element is used to define a plugin.
        -->
        <!ELEMENT plugin (property*)>
        <!ATTLIST plugin
                type CDATA #REQUIRED>

        <!--
          The javaModelGenerator element is used to define properties of the Java Model Generator.
          The Java Model Generator builds primary key classes, record classes, and Query by Example
          indicator classes.
        -->
        <!ELEMENT javaModelGenerator (property*)>
        <!ATTLIST javaModelGenerator
                targetPackage CDATA #REQUIRED
                targetProject CDATA #REQUIRED>

        <!--
          The javaTypeResolver element is used to define properties of the Java Type Resolver.
          The Java Type Resolver is used to calculate Java types from database column information.
          The default Java Type Resolver attempts to make JDBC DECIMAL and NUMERIC types easier
          to use by substituting Integral types if possible (Long, Integer, Short, etc.)
        -->
        <!ELEMENT javaTypeResolver (property*)>
        <!ATTLIST javaTypeResolver
                type CDATA #IMPLIED>

        <!--
          The sqlMapGenerator element is used to define properties of the SQL Map Generator.
          The SQL Map Generator builds an XML file for each table that conforms to MyBatis'
          SQL Mapper DTD.
        -->
        <!ELEMENT sqlMapGenerator (property*)>
        <!ATTLIST sqlMapGenerator
                targetPackage CDATA #REQUIRED
                targetProject CDATA #REQUIRED>

        <!--
          The javaClientGenerator element is used to define properties of the Java client Generator.
          The Java Client Generator builds Java interface and implementation classes
          (as required) for each table.
          If this element is missing, then the generator will not build Java Client classes.
        -->
        <!ELEMENT javaClientGenerator (property*)>
        <!ATTLIST javaClientGenerator
                type CDATA #IMPLIED
                targetPackage CDATA #REQUIRED
                targetProject CDATA #REQUIRED>

        <!--
          The table element is used to specify a database table that will be the source information
          for a set of generated objects.
        -->
        <!ELEMENT table (property*, generatedKey?, domainObjectRenamingRule?, columnRenamingRule?,selectByColumn*,selectByTable*,javaModelAssociation*,javaModelCollection*,generateModel?,generateSqlMap?,generateDao?,generateService?,generateController?,generateHtml*,generateSqlSchema?,generateModelVO?,generateViewVO?,generateExcelVO?,generateRequestVO?,(columnOverride | ignoreColumn | ignoreColumnsByRegex)*) >
        <!ATTLIST table
                ignore (true|false) #IMPLIED
                catalog CDATA #IMPLIED
                schema CDATA #IMPLIED
                tableName CDATA #REQUIRED
                alias CDATA #IMPLIED
                domainObjectName CDATA #IMPLIED
                mapperName CDATA #IMPLIED
                sqlProviderName CDATA #IMPLIED
                enableInsert CDATA #IMPLIED
                enableSelectByPrimaryKey CDATA #IMPLIED
                enableSelectByExample CDATA #IMPLIED
                enableUpdateByPrimaryKey CDATA #IMPLIED
                enableDeleteByPrimaryKey CDATA #IMPLIED
                enableDeleteByExample CDATA #IMPLIED
                enableCountByExample CDATA #IMPLIED
                enableUpdateByExample CDATA #IMPLIED
                selectByPrimaryKeyQueryId CDATA #IMPLIED
                selectByExampleQueryId CDATA #IMPLIED
                modelType CDATA #IMPLIED
                escapeWildcards CDATA #IMPLIED
                delimitIdentifiers CDATA #IMPLIED
                delimitAllColumns CDATA #IMPLIED>

        <!--
          The columnOverride element is used to change certain attributes of the column
          from their default values.
        -->
        <!ELEMENT columnOverride (property*)>
        <!ATTLIST columnOverride
                column CDATA #REQUIRED
                property CDATA #IMPLIED
                javaType CDATA #IMPLIED
                jdbcType CDATA #IMPLIED
                typeHandler CDATA #IMPLIED
                isGeneratedAlways CDATA #IMPLIED
                delimitedColumnName CDATA #IMPLIED>

        <!--
          The ignoreColumn element is used to identify a column that should be ignored.
          No generated SQL will refer to the column, and no property will be generated
          for the column in the model objects.
        -->
        <!ELEMENT ignoreColumn EMPTY>
        <!ATTLIST ignoreColumn
                column CDATA #REQUIRED
                delimitedColumnName CDATA #IMPLIED>

        <!--
          The ignoreColumnsByRegex element is used to identify a column pattern that should be ignored.
          No generated SQL will refer to the column, and no property will be generated
          for the column in the model objects.
        -->
        <!ELEMENT ignoreColumnsByRegex (except*)>
        <!ATTLIST ignoreColumnsByRegex
                pattern CDATA #REQUIRED>

        <!--
          The except element is used to identify an exception to the ignoreColumnsByRegex rule.
          If a column matches the regex rule, but also matches the exception, then the
          column will be included in the generated objects.
        -->
        <!ELEMENT except EMPTY>
        <!ATTLIST except
                column CDATA #REQUIRED
                delimitedColumnName CDATA #IMPLIED>

        <!--
          The generatedKey element is used to identify a column in the table whose value
          is calculated - either from a sequence (or some other query), or as an identity column.
        -->
        <!ELEMENT generatedKey EMPTY>
        <!ATTLIST generatedKey
                column CDATA #REQUIRED
                sqlStatement CDATA #REQUIRED
                identity CDATA #IMPLIED
                type CDATA #IMPLIED>

        <!--
          The domainObjectRenamingRule element is used to specify a rule for renaming
          object domain name before the corresponding domain object name is calculated
        -->
        <!ELEMENT domainObjectRenamingRule EMPTY>
        <!ATTLIST domainObjectRenamingRule
                searchString CDATA #REQUIRED
                replaceString CDATA #IMPLIED>

        <!--
          The columnRenamingRule element is used to specify a rule for renaming
          columns before the corresponding property name is calculated
        -->
        <!ELEMENT columnRenamingRule EMPTY>
        <!ATTLIST columnRenamingRule
                searchString CDATA #REQUIRED
                replaceString CDATA #IMPLIED>

        <!--
          The commentGenerator element is used to define properties of the Comment Generator.
          The Comment Generator adds comments to generated elements.
        -->
        <!ELEMENT commentGenerator (property*)>
        <!ATTLIST commentGenerator
                type CDATA #IMPLIED>

        <!--
          基于中间关系表的自查询 selectByTable
          可以配合关系表中另一个表的javaModelCollectionProperties生成，实现多对多的查询
          元素名：selectByTable
          属性信息：
          1、table 关系表名
          2、thisColumn 当前表主键在关系表中的字段名
          3、otherColumn 另一关联表的主键在关系表中的字段名
          4、methodSuffix 方法名关键字，最终生成方法名为：selectByTable+方法名关键字
          5、sortColumn 结果排序语句 如：SORT_ desc
          6、returnType 返回（泛型参数）类型（primaryKey或model,默认model）
        -->
        <!ELEMENT selectByTable EMPTY>
        <!ATTLIST selectByTable
                table CDATA #REQUIRED
                thisColumn CDATA #REQUIRED
                otherColumn CDATA #REQUIRED
                methodSuffix CDATA #REQUIRED
                orderByClause CDATA #IMPLIED
                additionClause CDATA #IMPLIED
                returnType CDATA #IMPLIED>
        <!--
          基于字段的查询方法 （也是配合javaModelCollection Properties实现查询方法）
          增加该属性会为每个字段生成SelectByColumnXXXX的查询方法。
          元素名：selectByColumn
          属性信息：
          1、column 列名
          2、orderByClause 排序语句
          3、returnType 返回泛型参数类型（可选，primaryKey或model,默认model）
        -->
        <!ELEMENT selectByColumn EMPTY>
        <!ATTLIST selectByColumn
                column CDATA #REQUIRED
                orderByClause CDATA #IMPLIED
                returnType CDATA #IMPLIED>

    <!--
        添加一个实体类型的属性，并实现一对一的association查询
        增加该属性会为每个字段生成SelectByColumnXXXX的查询方法。
        *如果仅仅指定field、fieldModel，则仅在实体中添加一个 modelType field的属性。
        元素名：javaModelAssociationProperties
        属性信息：
        1、field 生成的属性名
        2、modelType 属性类型完整类名
        3、whereColumn 条件字段列名
        4、mapperMethod 相关表的完整Mapper查询方法名（一般为selectByPrimaryKey或也可以返回单个实体的查询方法）
    -->
        <!ELEMENT javaModelAssociation EMPTY>
        <!ATTLIST javaModelAssociation
                fieldName CDATA #REQUIRED
                modelType CDATA #REQUIRED
                whereColumn CDATA #IMPLIED
                mapperMethod CDATA #IMPLIED>

        <!--
            添加一个实体列表的属性，并实现一对多的collection查询
            需要再相关表需要增加对应的外键属性，并生成对应的查询方法。
            *通过调用自己的外键查询可以达到递归查询的效果（慎用，大量递归可能引发效率问题）
            *如果该实体可能用于生成菜单或层级列表的通过转换方法，必须生成children为属性名的一对多的属性
            *如果仅仅指定field、fieldModel，则仅在实体中添加一个List<model> field的属性。
            元素名：javaModelCollectionProperties
            属性信息：
            1、field 生成的属性名
            2、modelType 属性类型完整类名
            3、whereColumn 条件字段列名
            4、mapperMethod 相关表的完整Mapper查询方法名（一般为selectByColumnXXXX或也可以是其他返回多条记录的查询方法）
        -->
        <!ELEMENT javaModelCollection EMPTY>
        <!ATTLIST javaModelCollection
                fieldName CDATA #REQUIRED
                modelType CDATA #REQUIRED
                whereColumn CDATA #IMPLIED
                mapperMethod CDATA #IMPLIED>

        <!--
            是否生成页面
             属性信息：
            1、generate 是否生成页面：”true“|”false“
            2、viewPath 视图文件名
            3、targetProject 视图路径，默认"src/main/resources/templates"
            4、loadingFrameType 指定页面打开方式：pop-小弹窗，inner-页面嵌入，full-全屏弹窗，默认full
            5、barPosition 工具条位置，"bottom"\"top" 默认”bottom“
            6、uiFrameType 页面框架名称，layui|zui
            7、pageColumnsNum 页面显示元素列数
            8、targetPackage 页面文件的基础包路径，默认使用context的htmlTargetPackage
        -->
        <!ELEMENT generateHtml (property*,htmlElementDescriptor*)>
        <!ATTLIST generateHtml
                generate (true|false) #REQUIRED
                viewPath CDATA #REQUIRED
                targetPackage  CDATA #IMPLIED
                loadingFrameType (full|inner|pop) #IMPLIED
                pageColumnsNum CDATA #IMPLIED
                barPosition (bottom|top) #IMPLIED
                uiFrameType (layui|zui) #IMPLIED
                targetProject CDATA #IMPLIED>

        <!--
            页面元素生成描述
            属性信息：
            1、column 数据库字段名
            2、tagType 生成的类型，生成类型支持：dropdownlist、radio、checkbox、switch
            3、dataUrl 数据接口请求地址
            4、dataFormat 数据格式：启停|有无|是否|性别，可应用在radio和switch，缓急|级别，仅在radio时有效
        -->
        <!ELEMENT htmlElementDescriptor EMPTY>
        <!ATTLIST htmlElementDescriptor
                column CDATA #REQUIRED
                tagType (dropdownlist|radio|checkbox|switch) #REQUIRED
                dataUrl CDATA #IMPLIED
                dataFormat (启停|有无|是否|性别|缓急|级别) #IMPLIED>

        <!--
            Dao接口生成描述
            属性信息：
            1、generate 是否生成,true生成,false忽略
            2、targetSubPackage 包路径的子路径,如com.vgosoft.xxx.dao中的dao
        -->
        <!ELEMENT generateDao EMPTY>
        <!ATTLIST generateDao
                generate (true|false) #REQUIRED
                targetSubPackage CDATA #IMPLIED>

        <!--
            Service接口生成描述
            属性信息：
            1、generate 是否生成,true生成,false忽略
            2、generateUnitTest 是否生成服务层的单元测试，缺省为true生成
            3、noServiceAnnotation 是否不添加@Service注解，既实现类不注入ioc
            4、targetSubPackage 包路径的子路径,如com.vgosoft.xxx.service中的service
        -->
        <!ELEMENT generateService EMPTY>
        <!ATTLIST generateService
                generate (true|false) #REQUIRED
                generateUnitTest (true|false) #IMPLIED
                noServiceAnnotation (false|true) #IMPLIED
                targetSubPackage CDATA #IMPLIED>
        <!--
            Controller接口生成描述
            属性信息：
            1、generate 是否生成,true生成,false忽略
            2、generateUnitTest 是否生成控制层的单元测试，缺省为true生成
            3、noSwaggerAnnotation 是否不添加Swagger相关注解
            4、targetSubPackage 包路径的子路径,如com.vgosoft.xxx.controller中的controller
            5、targetProject 项目路径默认与model一一致，一般为当前模块的src/main/java，
            也可以指定绝对路径如：d:/project/vgosoft-abc/src/main/java。由此可以把生成的元素放在位置。
            6、targetPackage 包路径。也可以有model的基础路径+targetSubPackage构成
            property配置：
            1、enableSysLogAnnotation:true|false,是否启用操作日志。不指定该属性则不启用。注意：启用是同时增加@Transactional注解
        -->
        <!ELEMENT generateController (property*, generateOptions*)>
        <!ATTLIST generateController
                generate (true|false) #REQUIRED
                generateUnitTest (true|false) #IMPLIED
                noSwaggerAnnotation (false|true) #IMPLIED
                targetSubPackage CDATA #IMPLIED
                targetProject CDATA #IMPLIED
                targetPackage CDATA #IMPLIED>

        <!--
                   表单选项接口生成描述
                   属性信息：
                   默认以id为选项的key值
                   1、nameColumn 指定用于显示名称（value）的列名。
                   2、类型可以选择flat数据扁平，tree数据树，默认flat（当选择tree时，实体需要具有parentId及children属性）
                -->
        <!ELEMENT generateOptions EMPTY>
        <!ATTLIST generateOptions
                nameColumn CDATA #REQUIRED
                type (flat|tree) #IMPLIED>

        <!--
            Model PO类对象生成描述
            属性信息：
            1、generate 是否生成,true生成,false忽略
            2、noMetaAnnotation 是否不添加@TableMeta、@ColumnMeta注解
            3、targetSubPackage 包路径的子路径,如com.vgosoft.xxx.entity中的entity
        -->
        <!ELEMENT generateModel EMPTY>
        <!ATTLIST generateModel
                generate (true|false) #REQUIRED
                noMetaAnnotation (false|true) #IMPLIED
                targetSubPackage CDATA #IMPLIED
                enableChildren (false|true) #IMPLIED>

        <!--
            sqlMapper XML文件生成描述
            属性信息：
            1、generate 是否生成,true生成,false忽略
        -->
        <!ELEMENT generateSqlMap (property*)>
        <!ATTLIST generateSqlMap
                generate (true|false) #REQUIRED>

        <!--
            SqlSchema sql schema文件生成描述
            属性信息：
            1、generate 是否生成,true生成（生成H2\Mysql数据库对应的ddl）,false忽略
        -->
        <!ELEMENT generateSqlSchema (property*)>
        <!ATTLIST generateSqlSchema
                generate (true|false) #REQUIRED>

        <!--
            vo类生成描述
            属性信息：
            1、generate 是否生成,true生成（VO抽象父类每次生成、vo类mappings类不存在是生成）,false忽略。
            2、includeColumns:VO模型包含的字段名,多值使用","。
            3、excludeColumns：当没有配置includeColumns时，VO模型(父类)排除的字段名，多值使用","。如果配置includeColumns属性，本配置项不生效;
                当不配置该属性时，默认忽略entity父抽象类属性对应的字段;
            当不配置该属性时，默认忽略entity父抽象类属性对应的字段。
            property配置：无
        -->
        <!ELEMENT generateModelVO (property*)>
        <!ATTLIST generateModelVO
                generate (true|false) #REQUIRED
                includeColumns CDATA #IMPLIED
                excludeColumns CDATA #IMPLIED>

        <!--
           默认视图配置的生成描述
           属性信息：
           1、generate 是否生成,true生成（ViewVO类不存时生成，如果存在则不再覆盖）,false忽略;
           2、includeColumns:视图包含的字段名,多值使用","。
           3、excludeColumns：当没有配置includeColumns时，视图排除的字段名，多值使用","。如果配置includeColumns属性，本配置项不生效;
                当不配置该属性时，默认忽略entity父抽象类属性对应的字段。
           4、indexColumn：行选择列的形式。包括：NONE-无、RADIO-单选、CHECKBOX-复选、ROW_INDEX-行号四种形式
           5、actionColumn：操作列的操作列表。包括：VIEW-查看、EDIT-编辑、REMOVE-删除中的0个或多个。
           6、queryColumns:应用复合查询的字段名,多值使用","。
            property配置：无
        -->
        <!ELEMENT generateViewVO (property*)>
        <!ATTLIST generateViewVO
                generate (true|false) #REQUIRED
                includeColumns CDATA #IMPLIED
                excludeColumns CDATA #IMPLIED
                indexColumn (NONE|CHECKBOX|RADIO|ROW_INDEX)  #IMPLIED
                actionColumn CDATA #IMPLIED
                queryColumns CDATA #IMPLIED>
        <!--
          请求参数配置的生成描述
          属性信息：
          1、generate 是否生成,true生成（RequestVO类不存时生成，如果存在则不再覆盖）,false忽略。
          2、includePageParam 是否包含分页参数。true包含
          3、excludeColumns：RequestVO(父类)排除的字段名，多值使用",";
                当不配置该属性时，默认忽略entity父抽象类属性对应的字段。
          property配置：无
        -->
        <!ELEMENT generateRequestVO (property*)>
        <!ATTLIST generateRequestVO
                generate (true|false) #REQUIRED
                includePageParam (true|false) #REQUIRED
                excludeColumns CDATA #IMPLIED>

        <!--
           Excel导入导出模型配置的生成描述，该模型不继承抽象VO父类
           属性信息：
           1、generate 是否生成,true生成（ExcelVO类不存时生成，如果存在则不再覆盖）,false忽略。
           2、includeColumns:Excel模型包含的字段名,多值使用","。
           3、excludeColumns：当没有配置includeColumns时，ExcelVO排除的字段名，多值使用","。如果配置includeColumns属性，本配置项不生效;
                当不配置该属性时，默认忽略entity父抽象类属性对应的字段。
           property配置：无
        -->
        <!ELEMENT generateExcelVO (property*)>
        <!ATTLIST generateExcelVO
                generate (true|false) #REQUIRED
                includeColumns CDATA #IMPLIED
                excludeColumns CDATA #IMPLIED>
