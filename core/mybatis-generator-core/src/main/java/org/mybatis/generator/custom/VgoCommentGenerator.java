/**
 *    Copyright 2006-2020 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package org.mybatis.generator.custom;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.*;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.MergeConstants;
import org.mybatis.generator.config.PropertyRegistry;
import org.mybatis.generator.internal.DefaultCommentGenerator;
import org.mybatis.generator.internal.util.JavaBeansUtil;
import org.mybatis.generator.internal.util.StringUtility;

import java.util.Properties;

public class VgoCommentGenerator extends DefaultCommentGenerator {
    private boolean suppressAllComments;   //阻止生成注释
    private boolean addRemarkComments;   //是否生成数据库表的注释

    //设置用户配置的参数
    public void addConfigurationProperties(Properties properties) {
        //调用父类方法保证父类方法可以正常使用
        super.addConfigurationProperties(properties);
        //获取suppressAllComments参数值
        suppressAllComments = Boolean.parseBoolean(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));
        //获取addRemarkComments参数值
        addRemarkComments = Boolean.parseBoolean(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_ADD_REMARK_COMMENTS));
    }

    //给model字段添加注释信息
    public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
        //如果阻止生成注释则直接返回
        /*if(suppressAllComments){
            return;
        }*/
        //文档注释开始
        field.addJavaDocLine("/**");
        //获取数据库字段的备注信息
        String remarks = introspectedColumn.getRemarks();
        //根据参数和备注信息判断是否添加备注信息
        if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
            String[] remarkLinesStrings = remarks.split(System.getProperty("line.separator"));
            for (String remarkLine : remarkLinesStrings) {
                field.addJavaDocLine(" * " + remarkLine);
                field.addJavaDocLine(" * Column Name:" + introspectedColumn.getActualColumnName() + " Type:" + introspectedColumn.getActualTypeName() + " Remark:" + introspectedColumn.getRemarks());
            }
        }
        field.addJavaDocLine(" */");
    }

    //给model以外字段添加注释，如example类
    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable) {

    }

    //在java文件顶端加注释
    @Override
    public void addJavaFileComment(CompilationUnit compilationUnit) {
        if (suppressAllComments) {
            return;
        }
        StringBuilder sb = new StringBuilder();
        compilationUnit.addFileCommentLine("/*"); //$NON-NLS-1$
        compilationUnit.addFileCommentLine(" * This class was generated by MyBatis Generator Vgosoft Edition."); //$NON-NLS-1$
        String s = getDateString();
        sb.append(" * 生成时间: " + s);
        compilationUnit.addFileCommentLine(sb.toString());
        compilationUnit.addFileCommentLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }
        StringBuilder sb = new StringBuilder();
        topLevelClass.addJavaDocLine("/**"); //$NON-NLS-1$
        sb.append(" * 类对应的数据库表为： "); //$NON-NLS-1$
        sb.append(introspectedTable.getFullyQualifiedTable());
        topLevelClass.addJavaDocLine(sb.toString());
        //添加表注释
        sb.setLength(0);
        sb.append(" * ");
        sb.append(introspectedTable.getRemarks());
        topLevelClass.addJavaDocLine(sb.toString());
        /*addJavadocTag(topLevelClass, false);*/
        topLevelClass.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
        FullyQualifiedJavaType record = new FullyQualifiedJavaType(introspectedTable.getBaseRecordType());
        if(("view"+record.getShortName()).equals(method.getName())){
            addMethodJavaDocLine(method,"根据主键获取单个业务实例",""
                    ,"@param id 可选参数，存在时查询数据；否则直接返回视图，用于打开表单。");
            addSwaggerApiAnnotation(method,"获得数据并返回页面视图（可用于普通业务在列表中新建接口）",
                    "根据给定id获取单个实体，id为可选参数，当id存在时查询数据，否则直接返回视图");
        }
        if(("get"+record.getShortName()).equals(method.getName())){
            addMethodJavaDocLine(method,"根据主键获取单个实体");
            addSwaggerApiAnnotation(method,"获得单条列表","根据给定id获取单个实体");
        }
        if(("list"+record.getShortName()).equals(method.getName())){
            FullyQualifiedJavaType entityType = new FullyQualifiedJavaType(introspectedTable.getBaseRecordType());
            String firstCharacterLowercase = JavaBeansUtil.getFirstCharacterLowercase(entityType.getShortName());
            addMethodJavaDocLine(method,"获取条件实体对象列表",""
                    ,"@param "+firstCharacterLowercase+" 用于接收属性同名参数");
            addSwaggerApiAnnotation(method,"获得数据列表",
                    "根据给定条件获取多条或所有数据列表，可以根据需要传入属性同名参数");
        }
        if(("create"+record.getShortName()).equals(method.getName())){
            addMethodJavaDocLine(method,"新增一条记录");
            addSwaggerApiAnnotation(method,"新增一条记录","新增一条记录,返回json，包含影响条数及消息");
        }
        if(("upload"+record.getShortName()).equals(method.getName())){
            addMethodJavaDocLine(method,"单个文件上传");
            addSwaggerApiAnnotation(method,"单个文件上传","单个文件上传接口");
        }
        if(("download"+record.getShortName()).equals(method.getName())){
            addMethodJavaDocLine(method,"文件下载","","@param id 路径参数，资源标识id"
                    ,"@param type 路径参数，下载方式：1-下载或另存 0-直接在浏览器中打开");
            addSwaggerApiAnnotation(method,"单个文件下载","单个文件下载接口");
        }
        if(("update"+record.getShortName()).equals(method.getName())){
            addMethodJavaDocLine(method,"根据主键更新实体对象");
            addSwaggerApiAnnotation(method,"更新一条记录","根据主键更新实体对象");
        }
        if(("delete"+record.getShortName()).equals(method.getName())){
            addMethodJavaDocLine(method,"删除一条记录");
            addSwaggerApiAnnotation(method,"单条记录删除","根据给定的id删除一条记录");
        }
        if(("deleteBatch"+record.getShortName()).equals(method.getName())){
            addMethodJavaDocLine(method,"根据ids批量删除记录");
            addSwaggerApiAnnotation(method,"批量记录删除","根据给定的一组id删除多条记录");
        }
    }

    @Override
    public void addGetterComment(Method method, IntrospectedTable introspectedTable,
                                 IntrospectedColumn introspectedColumn) {
        return;
    }

    @Override
    public void addSetterComment(Method method, IntrospectedTable introspectedTable,
                                 IntrospectedColumn introspectedColumn) {
        return;
    }

    @Override
    public void addComment(XmlElement xmlElement) {
        if (suppressAllComments) {
            return;
        }
        xmlElement.addElement(new TextElement("<!--")); //$NON-NLS-1$
        String t = "  提示 - " + MergeConstants.NEW_ELEMENT_TAG;
        xmlElement.addElement(new TextElement(t));
        xmlElement.addElement(
                new TextElement("  这个元素通过Mybatis Generator自动生成," //$NON-NLS-1$
                        + " 请勿修改.")); //$NON-NLS-1$
        xmlElement.addElement(new TextElement("-->")); //$NON-NLS-1$
    }

    private void addSwaggerApiAnnotation(Method method, String value, String notes) {
        StringBuilder sb = new StringBuilder();
        if (StringUtility.stringHasValue(value)) sb.append("value = \""+value+"\"");
        if (StringUtility.stringHasValue(notes)) {
            if (sb.length()>0) sb.append(",");
            sb.append("notes = \""+notes+"\"");
        }
        if (sb.length()>0) {
            method.addAnnotation("@ApiOperation("+sb.toString()+")");
        }
    }

    /**
     * 添加注释
     * @param method 要添加注释的方法
     * @param comments 要添加的注释
     * @param singleLine 注释方式（false-多行javaDoc方式，true-单行双斜杠）
     */
    @Override
    public void addMethodJavaDocLine(Method method,boolean singleLine,String...comments){
        if (comments.length == 0) {
            return;
        }
        if (singleLine) {
            for (String comment : comments) {
                method.addJavaDocLine("// " + comment);
            }
        }else{
            method.addJavaDocLine("/** ");
            for (String comment : comments) {
                method.addJavaDocLine("* " + comment);
            }
            method.addJavaDocLine("*/ ");
        }
    }
    private void addMethodJavaDocLine(Method method,String...comments){
        addMethodJavaDocLine(method,false,comments);
    }
}
