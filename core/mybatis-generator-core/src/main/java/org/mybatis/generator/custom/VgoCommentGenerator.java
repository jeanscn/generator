/**
 * Copyright 2006-2020 the original author or authors.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.mybatis.generator.custom;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.*;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.MergeConstants;
import org.mybatis.generator.config.PropertyRegistry;
import org.mybatis.generator.internal.DefaultCommentGenerator;
import org.mybatis.generator.internal.util.JavaBeansUtil;
import org.mybatis.generator.internal.util.StringUtility;

import java.util.Properties;

public class VgoCommentGenerator extends DefaultCommentGenerator {
    private boolean suppressAllComments;   //阻止生成注释
    private boolean addRemarkComments;   //是否生成数据库表的注释

    //设置用户配置的参数
    public void addConfigurationProperties(Properties properties) {
        //调用父类方法保证父类方法可以正常使用
        super.addConfigurationProperties(properties);
        //获取supressAllComment参数值
        suppressAllComments = Boolean.parseBoolean(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));
        //获取addRemarkComments参数值
        addRemarkComments = Boolean.parseBoolean(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_ADD_REMARK_COMMENTS));
    }

    //给model字段添加注释信息
    public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
        //如果阻止生成注释则直接返回
        /*if(suppressAllComments){
            return;
        }*/
        //文档注释开始
        field.addJavaDocLine("/**");
        //获取数据库字段的备注信息
        String remarks = introspectedColumn.getRemarks();
        //根据参数和备注信息判断是否添加备注信息
        if (addRemarkComments && StringUtility.stringHasValue(remarks)) {
            String[] remarkLinesStrings = remarks.split(System.getProperty("line.separator"));
            for (String remarkLine : remarkLinesStrings) {
                field.addJavaDocLine(" * " + remarkLine);
                field.addJavaDocLine(" * @Column Name:" + introspectedColumn.getActualColumnName() + " Type:" + introspectedColumn.getActualTypeName() + " Remark:" + introspectedColumn.getRemarks());
            }
        }
        field.addJavaDocLine(" */");
        //自定义注解
        addTableCustomAnnotation(field, introspectedColumn);
    }

    //给model以外字段添加注释，如example类
    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable) {

    }

    //在java文件顶端加注释
    @Override
    public void addJavaFileComment(CompilationUnit compilationUnit) {
        if (suppressAllComments) {
            return;
        }
        StringBuilder sb = new StringBuilder();
        compilationUnit.addFileCommentLine("/*"); //$NON-NLS-1$
        compilationUnit.addFileCommentLine(" * This class was generated by MyBatis Generator Vgosoft Edition."); //$NON-NLS-1$
        String s = getDateString();
        sb.append(" * 代码生成时间: " + s);
        compilationUnit.addFileCommentLine(sb.toString());
        compilationUnit.addFileCommentLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }
        StringBuilder sb = new StringBuilder();
        topLevelClass.addJavaDocLine("/**"); //$NON-NLS-1$
        sb.append(" * 类对应的数据库表为： "); //$NON-NLS-1$
        sb.append(introspectedTable.getFullyQualifiedTable());
        topLevelClass.addJavaDocLine(sb.toString());
        /*addJavadocTag(topLevelClass, false);*/
        topLevelClass.addJavaDocLine(" */"); //$NON-NLS-1$
        addClassVgoAnnotation(topLevelClass, introspectedTable);
    }

    private void addClassVgoAnnotation(InnerClass innerClass, IntrospectedTable introspectedTable) {
        StringBuilder sb = new StringBuilder("@TableMeta(");
        sb.append("value = \"").append(introspectedTable.getFullyQualifiedTable()).append("\"");
        String descript = "";
        if (introspectedTable.getRemarks() != null) {
            descript = introspectedTable.getRemarks();
        }
        sb.append(",descript = \"").append(descript).append("\"");
        String cname = JavaBeansUtil.getFirstCharacterLowercase(innerClass.getType().getShortName());
        sb.append(",beanname = \"").append(cname).append("Impl\"");
        innerClass.addJavaDocLine(sb.toString() + ")");
    }

    @Override
    public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
        return;
    }

    @Override
    public void addGetterComment(Method method, IntrospectedTable introspectedTable,
                                 IntrospectedColumn introspectedColumn) {
        return;
    }

    @Override
    public void addSetterComment(Method method, IntrospectedTable introspectedTable,
                                 IntrospectedColumn introspectedColumn) {
        return;
    }

    @Override
    public void addComment(XmlElement xmlElement) {
        if (suppressAllComments) {
            return;
        }
        xmlElement.addElement(new TextElement("<!--")); //$NON-NLS-1$
        String t = "  提示 - " + MergeConstants.NEW_ELEMENT_TAG;
        xmlElement.addElement(new TextElement(t));
        xmlElement.addElement(
                new TextElement("  这个元素通过Mybatis Generator自动生成," //$NON-NLS-1$
                        + " 请勿修改.")); //$NON-NLS-1$
        xmlElement.addElement(new TextElement("-->")); //$NON-NLS-1$
    }

    //数据表自定义注解
    private void addTableCustomAnnotation(Field field, IntrospectedColumn introspectedColumn) {
        String remarks = introspectedColumn.getRemarks();
        StringBuilder annotation = new StringBuilder("@ColumnMeta(");
        annotation.append("value = \"").append(introspectedColumn.getActualColumnName()).append("\"");
        if (remarks != null) annotation.append(",description = \"").append(remarks.trim()).append("\"");
        if (introspectedColumn.isIdentity()) annotation.append(",pkid = true");
        annotation.append(",size = ").append(String.valueOf(introspectedColumn.getLength()));
        if ("Date".equals(introspectedColumn.getFullyQualifiedJavaType().getShortName()))
            annotation.append(",dataFormat = \"yyyy-MM-dd HH:mm\"");
        field.addJavaDocLine(annotation.toString() + ")");
    }
}
