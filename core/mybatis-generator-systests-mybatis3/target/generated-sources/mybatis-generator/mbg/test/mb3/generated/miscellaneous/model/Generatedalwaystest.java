/*
 * This class was generated by MyBatis Generator Vgosoft Edition.
 * 生成时间: 2021-05-08 18:00
 */
package mbg.test.mb3.generated.miscellaneous.model;

import com.vgosoft.core.annotation.ColumnMeta;
import com.vgosoft.core.annotation.TableMeta;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.sql.JDBCType;
import java.util.Arrays;
import lombok.Getter;
import lombok.Setter;
import mbg.test.common.BaseClass;
import org.springframework.stereotype.Repository;

/**
 * 类对应的数据库表为： GENERATEDALWAYSTEST
 */
@Repository
@TableMeta(value = "GeneratedAlwaysTest", descript = "", beanname = "generatedalwaystestImpl")
@ApiModel(value = "Generatedalwaystest", description = "")
@Setter
@Getter
public class Generatedalwaystest extends BaseClass {
    private static final long serialVersionUID = 1L;

    /**
     */
    @ColumnMeta(value = "ID",description = "null",size =32,order = 20,type = JDBCType.INTEGER)
    @ApiModelProperty(value = "null",name = "ID")
    private Integer id;

    /**
     */
    @ColumnMeta(value = "NAME",description = "null",size =20,order = 21)
    @ApiModelProperty(value = "null",name = "NAME")
    private String name;

    /**
     */
    @ColumnMeta(value = "ID_PLUS1",description = "null",size =32,order = 22,type = JDBCType.INTEGER)
    @ApiModelProperty(value = "null",name = "ID_PLUS1")
    private Integer idPlus1;

    /**
     */
    @ColumnMeta(value = "ID_PLUS2",description = "null",size =32,order = 23,type = JDBCType.INTEGER)
    @ApiModelProperty(value = "null",name = "ID_PLUS2")
    private Integer idPlus2;

    /**
     */
    @ColumnMeta(value = "BLOB1",description = "null",size =16777216,order = 24,type = JDBCType.VARBINARY)
    @ApiModelProperty(value = "null",name = "BLOB1")
    private byte[] blob1;

    public Generatedalwaystest(Integer id, String name, Integer idPlus1, Integer idPlus2) {
        this.id = id;
        this.name = name;
        this.idPlus1 = idPlus1;
        this.idPlus2 = idPlus2;
    }

    public Generatedalwaystest(Integer id, String name, Integer idPlus1, Integer idPlus2, byte[] blob1) {
        this.id = id;
        this.name = name;
        this.idPlus1 = idPlus1;
        this.idPlus2 = idPlus2;
        this.blob1 = blob1;
    }

    public Generatedalwaystest() {
        super();
    }

    public Generatedalwaystest withId(Integer id) {
        this.setId(id);
        return this;
    }

    public Generatedalwaystest withName(String name) {
        this.setName(name);
        return this;
    }

    public Generatedalwaystest withIdPlus1(Integer idPlus1) {
        this.setIdPlus1(idPlus1);
        return this;
    }

    public Generatedalwaystest withIdPlus2(Integer idPlus2) {
        this.setIdPlus2(idPlus2);
        return this;
    }

    public Generatedalwaystest withBlob1(byte[] blob1) {
        this.setBlob1(blob1);
        return this;
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        Generatedalwaystest other = (Generatedalwaystest) that;
        return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId()))
            && (this.getName() == null ? other.getName() == null : this.getName().equals(other.getName()))
            && (this.getIdPlus1() == null ? other.getIdPlus1() == null : this.getIdPlus1().equals(other.getIdPlus1()))
            && (this.getIdPlus2() == null ? other.getIdPlus2() == null : this.getIdPlus2().equals(other.getIdPlus2()))
            && (Arrays.equals(this.getBlob1(), other.getBlob1()));
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
        result = prime * result + ((getName() == null) ? 0 : getName().hashCode());
        result = prime * result + ((getIdPlus1() == null) ? 0 : getIdPlus1().hashCode());
        result = prime * result + ((getIdPlus2() == null) ? 0 : getIdPlus2().hashCode());
        result = prime * result + (Arrays.hashCode(getBlob1()));
        return result;
    }
}