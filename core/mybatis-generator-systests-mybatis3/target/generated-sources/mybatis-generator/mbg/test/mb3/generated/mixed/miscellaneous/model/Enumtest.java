/*
 * This class was generated by MyBatis Generator Vgosoft Edition.
 * 生成时间: 2021-05-08 18:00
 */
package mbg.test.mb3.generated.mixed.miscellaneous.model;

import com.vgosoft.core.annotation.ColumnMeta;
import com.vgosoft.core.annotation.TableMeta;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.sql.JDBCType;
import lombok.Getter;
import lombok.Setter;
import mbg.test.common.BaseClass;
import mbg.test.mb3.common.TestEnum;
import org.springframework.stereotype.Repository;

/**
 * 类对应的数据库表为： ENUMTEST
 */
@Repository
@TableMeta(value = "EnumTest", descript = "This is a comment for the EnumTest table", beanname = "enumtestImpl")
@ApiModel(value = "Enumtest", description = "This is a comment for the EnumTest table")
@Setter
@Getter
public class Enumtest extends BaseClass {
    private static final long serialVersionUID = 1L;

    /**
     */
    @ColumnMeta(value = "ID",description = "null",size =32,order = 20,type = JDBCType.INTEGER)
    @ApiModelProperty(value = "null",name = "ID")
    private Integer id;

    /**
     * This is a comment for the EnumTest.name column
     * Column Name:NAME Type:VARCHAR Remark:This is a comment for the EnumTest.name column
     */
    @ColumnMeta(value = "NAME",description = "This is a comment for the EnumTest.name column",size =20,order = 21)
    @ApiModelProperty(value = "This is a comment for the EnumTest.name column",name = "NAME")
    private TestEnum name;

    public Enumtest(Integer id, TestEnum name) {
        this.id = id;
        this.name = name;
    }

    public Enumtest() {
        super();
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        Enumtest other = (Enumtest) that;
        return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId()))
            && (this.getName() == null ? other.getName() == null : this.getName().equals(other.getName()));
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
        result = prime * result + ((getName() == null) ? 0 : getName().hashCode());
        return result;
    }
}