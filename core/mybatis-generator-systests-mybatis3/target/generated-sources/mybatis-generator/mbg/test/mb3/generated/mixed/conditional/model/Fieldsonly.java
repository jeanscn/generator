/*
 * This class was generated by MyBatis Generator Vgosoft Edition.
 * 生成时间: 2021-05-08 18:00
 */
package mbg.test.mb3.generated.mixed.conditional.model;

import com.vgosoft.core.annotation.ColumnMeta;
import com.vgosoft.core.annotation.TableMeta;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import java.sql.JDBCType;
import lombok.Getter;
import lombok.Setter;
import org.springframework.stereotype.Repository;

/**
 * 类对应的数据库表为： FIELDSONLY
 */
@Repository
@TableMeta(value = "FieldsOnly", descript = "", beanname = "fieldsonlyImpl")
@ApiModel(value = "Fieldsonly", description = "")
@Setter
@Getter
public class Fieldsonly implements Serializable {
    private static final long serialVersionUID = 1L;

    /**
     */
    @ColumnMeta(value = "INTEGERFIELD",description = "null",size =32,order = 21,type = JDBCType.INTEGER)
    @ApiModelProperty(value = "null",name = "INTEGERFIELD")
    private Integer integerfield;

    /**
     */
    @ColumnMeta(value = "DOUBLEFIELD",description = "null",size =64,order = 22,type = JDBCType.DOUBLE)
    @ApiModelProperty(value = "null",name = "DOUBLEFIELD")
    private Double doublefield;

    /**
     */
    @ColumnMeta(value = "FLOATFIELD",description = "null",size =64,order = 23,type = JDBCType.DOUBLE)
    @ApiModelProperty(value = "null",name = "FLOATFIELD")
    private Double floatfield;

    public Fieldsonly(Integer integerfield, Double doublefield, Double floatfield) {
        this.integerfield = integerfield;
        this.doublefield = doublefield;
        this.floatfield = floatfield;
    }

    public Fieldsonly() {
        super();
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        Fieldsonly other = (Fieldsonly) that;
        return (this.getIntegerfield() == null ? other.getIntegerfield() == null : this.getIntegerfield().equals(other.getIntegerfield()))
            && (this.getDoublefield() == null ? other.getDoublefield() == null : this.getDoublefield().equals(other.getDoublefield()))
            && (this.getFloatfield() == null ? other.getFloatfield() == null : this.getFloatfield().equals(other.getFloatfield()));
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getIntegerfield() == null) ? 0 : getIntegerfield().hashCode());
        result = prime * result + ((getDoublefield() == null) ? 0 : getDoublefield().hashCode());
        result = prime * result + ((getFloatfield() == null) ? 0 : getFloatfield().hashCode());
        return result;
    }
}